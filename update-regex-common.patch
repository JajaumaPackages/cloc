--- a/cloc	2015-06-03 00:17:23.000000000 -0400
+++ b/cloc	2016-01-21 13:24:19.669660411 -0500
@@ -7,8 +8,8 @@
 #   - SLOCCount v2.26 
 #     http://www.dwheeler.com/sloccount/
 #     by David Wheeler.
-#   - Regexp::Common v2.120
-#     http://search.cpan.org/~abigail/Regexp-Common-2.120/lib/Regexp/Common.pm
+#   - Regexp::Common v2013031301
+#     http://search.cpan.org/~abigail/Regexp-Common-2013031301/lib/Regexp/Common.pm
 #     by Damian Conway and Abigail.
 #   - Win32::Autoglob 
 #     http://search.cpan.org/~sburke/Win32-Autoglob-1.01/Autoglob.pm
@@ -116,9 +117,6 @@
 use Text::Tabs qw { expand };
 use Cwd qw { cwd };
 use File::Glob;
-my $PERL_516 = $] >= 5.016 ? 1 : 0;  # 5.16 deprecates defined(@array)
-no warnings 'deprecated';            # will need to comment this out to test
-                                     # each new Perl version
 # 1}}}
 # Usage information, options processing.       {{{1
 my $ON_WINDOWS = 0;
@@ -1275,16 +1273,9 @@
         my $not_Filters_by_Language_Lang_LR = 0;
 #print "file_LR = [$file_L] [$file_R]\n";
 #print "Lang_LR = [$Lang_L] [$Lang_R]\n";
-        if ($PERL_516) {
-            if (!(@{$Filters_by_Language{$Lang_L} }) or
-                !(@{$Filters_by_Language{$Lang_R} })) {
-                $not_Filters_by_Language_Lang_LR = 1;
-            }
-        } else {
-            if (!defined(@{$Filters_by_Language{$Lang_L} }) or
-                !defined(@{$Filters_by_Language{$Lang_R} })) {
-                $not_Filters_by_Language_Lang_LR = 1;
-            }
+        if (!(@{$Filters_by_Language{$Lang_L} }) or
+            !(@{$Filters_by_Language{$Lang_R} })) {
+            $not_Filters_by_Language_Lang_LR = 1;
         }
         if ($not_Filters_by_Language_Lang_LR) {
             if (($Lang_L eq "(unknown)") or ($Lang_R eq "(unknown)")) {
@@ -1618,7 +1609,7 @@
         $Ignored{$file} = "--exclude-lang=$Language{$file}";
         next;
     }
-    my $Filters_by_Language_Language_file = !defined @{$Filters_by_Language{$Language{$file}} };
+    my $Filters_by_Language_Language_file = ! @{$Filters_by_Language{$Language{$file}} };
     if ($Filters_by_Language_Language_file) {
         if ($Language{$file} eq "(unknown)") {
             $Ignored{$file} = "language unknown (#1)";
@@ -1756,11 +1747,7 @@
                    )?
                    $}x) {
                 if ($report_type eq "by language") {
-                    if ($PERL_516) {
-                        next unless         @{$rhaa_Filters_by_Language->{$1}};
-                    } else {
-                        next unless defined @{$rhaa_Filters_by_Language->{$1}};
-                    }
+                    next unless @{$rhaa_Filters_by_Language->{$1}};
                     # above test necessary to avoid trying to sum reports
                     # of reports (which have no language breakdown).
                     $found_language = 1;
@@ -3001,7 +2988,8 @@
                 $language eq "Lisp/Julia"               or
                 $language eq "Perl/Prolog"              or
                 $language eq "D/dtrace"                 or
-                $language eq "IDL/Qt Project/Prolog";
+                $language eq "IDL/Qt Project/Prolog"    or
+                $language eq "(unknown)";
         printf $OUT "%s\n", $language;
         foreach my $filter (@{$rhaa_Filters_by_Language->{$language}}) {
             printf $OUT "    filter %s", $filter->[0];
@@ -3259,7 +3247,7 @@
 } # 1}}}
 sub print_language_filters {                 # {{{1
     my ($language,) = @_;
-    if (!defined @{$Filters_by_Language{$language}}) {
+    if (!@{$Filters_by_Language{$language}}) {
         warn "Unknown language: $language\n";
         warn "Use --show-lang to list all defined languages.\n";
         return;
@@ -4623,7 +4611,7 @@
 
   open (FILE, $file);
   while (<FILE>) {
-    if (m/^\\begin{code}/) { close FILE; return 2; }
+    if (m/^\\begin\{code\}/) { close FILE; return 2; }
     if (m/^>\s/) { close FILE; return 1; }
   }
 
@@ -4652,9 +4640,9 @@
             if (!s/^>//) { s/.*//; }
         } elsif ($literate == 2) {
             if ($inlitblock) {
-                if (m/^\\end{code}/) { s/.*//; $inlitblock = 0; }
+                if (m/^\\end\{code\}/) { s/.*//; $inlitblock = 0; }
             } elsif (!$inlitblock) {
-                if (m/^\\begin{code}/) { s/.*//; $inlitblock = 1; }
+                if (m/^\\begin\{code\}/) { s/.*//; $inlitblock = 1; }
                 else { s/.*//; }
             }
         }
@@ -6582,7 +6570,7 @@
         my $language = $rh_Language_by_Extension->{$ext};
         next if defined $extension_collisions{$language};
         next if $seen_it{$language};
-        if (!defined @{$rhaa_Filters_by_Language->{$language}}) {
+        if (!@{$rhaa_Filters_by_Language->{$language}}) {
             $OK = 0;
             warn "Missing language filter for $language\n";
         }
@@ -6592,9 +6580,8 @@
 } # 1}}}
 sub Install_Regexp_Common {                  # {{{1
     # Installs portions of Damian Conway's & Abigail's Regexp::Common
-    # module, v2.120, into a temporary directory for the duration of
-    # this run.
-
+    # module, version 2013031301 into a temporary directory for the
+    # duration of this run.
     my %Regexp_Common_Contents = ();
 $Regexp_Common_Contents{'Common'} = <<'EOCommon'; # {{{2
 package Regexp::Common;
@@ -6602,11 +6589,22 @@
 use 5.00473;
 use strict;
 
-local $^W = 1;
+BEGIN {
+    # This makes sure 'use warnings' doesn't bomb out on 5.005_*;
+    # warnings won't be enabled on those old versions though.
+    # Since all other files use this file, we can use 'use warnings'
+    # elsewhere as well, but *AFTER* 'use Regexp::Common'.
+    if ($] < 5.006) {
+        $INC {"warnings.pm"} = 1;
+        no strict 'refs';
+        *{"warnings::unimport"} = sub {0};
+    }
+}
 
+use warnings;
 use vars qw /$VERSION %RE %sub_interface $AUTOLOAD/;
 
-($VERSION) = q $Revision: 2.120 $ =~ /([\d.]+)/;
+$VERSION = '2013031301';
 
 
 sub _croak {
@@ -6636,13 +6634,10 @@
     return bless ref($self)->new(@$self, $extra), ref($self);
 }
 
-# Modification for cloc:  only need a few modules from Regexp::Common.
 my %imports = map {$_ => "Regexp::Common::$_"}
-              qw /balanced comment delimited /;
-#my %imports = map {$_ => "Regexp::Common::$_"}
-#              qw /balanced CC     comment   delimited lingua list
-#                  net      number profanity SEN       URI    whitespace
-#                  zip/;
+              qw /balanced CC     comment   delimited lingua list
+                  net      number profanity SEN       URI    whitespace
+                  zip/;
 
 sub import {
     shift;  # Shift off the class.
@@ -6844,8 +6839,6 @@
 package Regexp::Common::Entry;
 # use Carp;
 
-local $^W = 1;
-
 use overload
     q{""} => sub {
         my ($self) = @_;
@@ -6864,25 +6857,27 @@
     my ($self, $args, $flags) = @_;
     bless { %$self, args=>$args, flags=>$flags }, ref $self;
 }
-# 
-#    Copyright (c) 2001 - 2005, Damian Conway and Abigail. All Rights
-#  Reserved. This module is free software. It may be used, redistributed
-#      and/or modified under the terms of the Perl Artistic License
-#            (see http://www.perl.com/perl/misc/Artistic.html)
+1;
+#
+# This software is Copyright (c) 2001 - 2011, Damian Conway and Abigail.
+#
+# This module is free software, and maybe used under any of the following
+# licenses:
+#
+#  1) The Perl Artistic License.     See the file COPYRIGHT.AL.
+#  2) The Perl Artistic License 2.0. See the file COPYRIGHT.AL2.
+#  3) The BSD Licence.               See the file COPYRIGHT.BSD.
+#  4) The MIT Licence.               See the file COPYRIGHT.MIT.
 EOCommon
 # 2}}}
 $Regexp_Common_Contents{'Common/comment'} = <<'EOC';   # {{{2
-# $Id: comment.pm,v 2.116 2005/03/16 00:00:02 abigail Exp $
-
 package Regexp::Common::comment;
 
 use strict;
-local $^W = 1;
+use warnings;
 
-use Regexp::Common qw /pattern clean no_defaults/;
 use vars qw /$VERSION/;
-
-($VERSION) = q $Revision: 2.116 $ =~ /[\d.]+/g;
+$VERSION = '2010010201';
 
 my @generic = (
     {languages => [qw /ABC Forth/],
@@ -6904,7 +6899,8 @@
     {languages => [qw {ALPACA B C C-- LPC PL/I}],
      from_to   => [[qw {/* */}]]},
 
-    {languages => [qw /awk fvwm2 Icon mutt Perl Python QML R Ruby shell Tcl/],
+    {languages => [qw /awk fvwm2 Icon m4 mutt Perl Python QML
+                       R Ruby shell Tcl/],
      to_eol    => ['#']},
 
     {languages => [[BASIC => 'mvEnterprise']],
@@ -6913,7 +6909,7 @@
     {languages => [qw /Befunge-98 Funge-98 Shelta/],
      id        => [';']},
 
-    {languages => ['beta-Juliet', 'Crystal Report', 'Portia'],
+    {languages => ['beta-Juliet', 'Crystal Report', 'Portia', 'Ubercode'],
      to_eol    => ['//']},
 
     {languages => ['BML'],
@@ -6945,13 +6941,16 @@
     {languages => [qw /J/],
      to_eol    => ['NB[.]']},
 
+    {languages => [qw /JavaDoc/],
+     from_to   => [[qw {/** */}]]},
+
     {languages => [qw /Nickle/],
      to_eol    => ['#'],
      from_to   => [[qw {/* */}]]},
 
     {languages => [qw /Oberon/],
      from_to   => [[qw /(* *)/]]},
-     
+
     {languages => [[qw /Pascal Delphi/], [qw /Pascal Free/], [qw /Pascal GPC/]],
      to_eol    => ['//'],
      from_to   => [[qw !{ }!], [qw !(* *)!]]},
@@ -6992,6 +6991,9 @@
 
     {languages => [qw /*W/],
      from_to   => [[qw {|| !!}]]},
+
+    {languages => [qw /ZZT-OOP/],
+     to_eol    => ["'"]},
 );
 
 my @plain_or_nested = (
@@ -7000,6 +7002,8 @@
    [Haskell      =>  "-{2,}",     "{-"  => "-}"],
    [Hugo         =>  "!(?!\\\\)", "!\\" => "\\!"],
    [SLIDE        =>  "#",         "(*"  => "*)"],
+  ['Modula-2'    =>  undef,       "(*"  => "*)"],
+  ['Modula-3'    =>  undef,       "(*"  => "*)"],
 );
 
 #
@@ -7018,7 +7022,6 @@
 sub to_eol  ($)  {"(?k:(?k:$_[0])(?k:[^\\n]*)(?k:\\n))"}
 sub id      ($)  {"(?k:(?k:$_[0])(?k:[^$_[0]]*)(?k:$_[0]))"}  # One char only!
 sub from_to      {
-    local $^W = 1;
     my ($begin, $end) = @_;
 
     my $qb  = quotemeta $begin;
@@ -7032,7 +7035,6 @@
 
 my $count = 0;
 sub nested {
-    local $^W = 1;
     my ($begin, $end) = @_;
 
     $count ++;
@@ -7093,9 +7095,8 @@
                 ;
     }
 }
-                
 
-    
+
 #
 # Other languages.
 #
@@ -7103,7 +7104,7 @@
 # http://www.pascal-central.com/docs/iso10206.txt
 pattern name    => [qw /comment Pascal/],
         create  => '(?k:' . '(?k:[{]|[(][*])'
-                          . '(?k:[^}*]*(?:[*][^)][^}*]*)*)'
+                          . '(?k:[^}*]*(?:[*](?![)])[^}*]*)*)'
                           . '(?k:[}]|[*][)])'
                           . ')'
         ;
@@ -7155,10 +7156,11 @@
 @Regexp::Common::comment::scores = (1,  3,  3,  2,  1,  4,  2,  4,  1,  8,
                                     5,  1,  3,  1,  1,  3, 10,  1,  1,  1,
                                     1,  4,  4,  8,  4, 10);
+{
+my ($s, $x);
 pattern name    =>  [qw /comment Beatnik/],
         create  =>  sub {
             use re 'eval';
-            my ($s, $x);
             my $re = qr {\b([A-Za-z]+)\b
                          (?(?{($s, $x) = (0, lc $^N);
                               $s += $Regexp::Common::comment::scores
@@ -7168,6 +7170,7 @@
         },
         version  => 5.008,
         ;
+}
 
 
 # http://www.cray.com/craydoc/manuals/007-3692-005/html-007-3692-005/
@@ -7188,37 +7191,26 @@
         ;
 
 1;
-#
-#    Copyright (c) 2001 - 2003, Damian Conway. All Rights Reserved.
-#      This module is free software. It may be used, redistributed
-#     and/or modified under the terms of the Perl Artistic License
-#           (see http://www.perl.com/perl/misc/Artistic.html)
 EOC
 # 2}}}
 $Regexp_Common_Contents{'Common/balanced'} = <<'EOB';   # {{{2
 package Regexp::Common::balanced; {
 
+use Regexp::Common qw /pattern clean no_defaults/;
+
 use strict;
-local $^W = 1;
+use warnings;
 
 use vars qw /$VERSION/;
-($VERSION) = q $Revision: 2.101 $ =~ /[\d.]+/g;
-
-use Regexp::Common qw /pattern clean no_defaults/;
+$VERSION = '2013030901';
 
 my %closer = ( '{'=>'}', '('=>')', '['=>']', '<'=>'>' );
-my $count = -1;
 my %cache;
 
 sub nested {
-    local $^W = 1;
     my ($start, $finish) = @_;
 
-    return $Regexp::Common::balanced [$cache {$start} {$finish}]
-            if exists $cache {$start} {$finish};
-
-    $count ++;
-    my $r = '(??{$Regexp::Common::balanced ['. $count . ']})';
+    return $cache {$start} {$finish} if exists $cache {$start} {$finish};
 
     my @starts   = map {s/\\(.)/$1/g; $_} grep {length}
                         $start  =~ /([^|\\]+|\\.)+/gs;
@@ -7240,24 +7232,21 @@
         my $tb  = quotemeta substr $begin => 1;
         my $te  = quotemeta substr $end   => 1;
 
-        use re 'eval';
-
         my $add;
         if ($fb eq $fe) {
             push @re =>
-                   qr /(?:$qb(?:(?>[^$fb]+)|$fb(?!$tb)(?!$te)|$r)*$qe)/;
+                   qq /(?:$qb(?:(?>[^$fb]+)|$fb(?!$tb)(?!$te)|(?-1))*$qe)/;
         }
         else {
             my   @clauses =  "(?>[^$fb$fe]+)";
             push @clauses => "$fb(?!$tb)" if length $tb;
             push @clauses => "$fe(?!$te)" if length $te;
-            push @clauses =>  $r;
-            push @re      =>  qr /(?:$qb(?:@clauses)*$qe)/;
+            push @clauses => "(?-1)";
+            push @re      =>  qq /(?:$qb(?:@clauses)*$qe)/;
         }
     }
 
-    $cache {$start} {$finish} = $count;
-    $Regexp::Common::balanced [$count] = qr/@re/;
+    $cache {$start} {$finish} = qr /(@re)/;
 }
 
 
@@ -7272,34 +7261,35 @@
                 $flag -> {-begin} = join "|" => @open;
                 $flag -> {-end}   = join "|" => @close;
             }
-            my $pat = nested @$flag {qw /-begin -end/};
-            return exists $flag -> {-keep} ? qr /($pat)/ : $pat;
+            return nested @$flag {qw /-begin -end/};
         },
-        version => 5.006,
+        version => 5.010,
         ;
 
 }
 
 1;
-#
-#     Copyright (c) 2001 - 2003, Damian Conway. All Rights Reserved.
-#       This module is free software. It may be used, redistributed
-#      and/or modified under the terms of the Perl Artistic License
-#            (see http://www.perl.com/perl/misc/Artistic.html)
+# This software is Copyright (c) 2001 - 2013, Damian Conway and Abigail.
+# 
+# This module is free software, and maybe used under any of the following
+# licenses:
+# 
+#  1) The Perl Artistic License.     See the file COPYRIGHT.AL.
+#  2) The Perl Artistic License 2.0. See the file COPYRIGHT.AL2.
+#  3) The BSD Licence.               See the file COPYRIGHT.BSD.
+#  4) The MIT Licence.               See the file COPYRIGHT.MIT.
 EOB
 # 2}}}
-$Regexp_Common_Contents{'Common/delimited'} = <<'EOD';   # {{{2
-# $Id: delimited.pm,v 2.104 2005/03/16 00:22:45 abigail Exp $
-
+$Regexp_Common_Contents{'Common/delimited'} = <<'EOD';   # {{{3
 package Regexp::Common::delimited;
 
+use Regexp::Common qw /pattern clean no_defaults/;
+
 use strict;
-local $^W = 1;
+use warnings;
 
-use Regexp::Common qw /pattern clean no_defaults/;
 use vars qw /$VERSION/;
-
-($VERSION) = q $Revision: 2.104 $ =~ /[\d.]+/g;
+$VERSION = '2010010201';
 
 sub gen_delimited {
 
@@ -7350,11 +7340,15 @@
 
 
 1;
-#
-#     Copyright (c) 2001 - 2003, Damian Conway. All Rights Reserved.
-#       This module is free software. It may be used, redistributed
-#      and/or modified under the terms of the Perl Artistic License
-#            (see http://www.perl.com/perl/misc/Artistic.html)
+# This software is Copyright (c) 2001 - 2009, Damian Conway and Abigail.
+# 
+# This module is free software, and maybe used under any of the following
+# licenses:
+# 
+#  1) The Perl Artistic License.     See the file COPYRIGHT.AL.
+#  2) The Perl Artistic License 2.0. See the file COPYRIGHT.AL2.
+#  3) The BSD Licence.               See the file COPYRIGHT.BSD.
+#  4) The MIT Licence.               See the file COPYRIGHT.MIT.
 EOD
 # 2}}}
     my $problems        = 0;
@@ -8258,7 +8252,7 @@
 } # 1}}}
 sub call_regexp_common {                     # {{{1
     my ($ra_lines, $language ) = @_;
-    print "-> call_regexp_common\n" if $opt_v > 2;
+    print "-> call_regexp_common for $language\n" if $opt_v > 2;
 
     Install_Regexp_Common() unless $HAVE_Rexexp_Common;
 
@@ -8280,7 +8274,6 @@
     # a bogus use of %RE to avoid:
     # Name "main::RE" used only once: possible typo at cloc line xx.
     print scalar keys %RE if $opt_v < -20;
-#?#print "$all_lines\n";
     print "<- call_regexp_common\n" if $opt_v > 2;
     return split("\n", $all_lines);
 } # 1}}}
